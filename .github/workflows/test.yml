name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
      fail-fast: false  # Don't cancel other jobs if one fails
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run unit tests
      run: |
        # Run tests with better error handling
        pnpm test --reporter=verbose --bail=1
      continue-on-error: false  # Unit tests are critical
    
    - name: Run type checking
      run: |
        pnpm type-check
      continue-on-error: false  # Type checking is critical
    
    - name: Run linting
      run: |
        pnpm lint
      continue-on-error: false  # Linting is critical for code quality
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.node-version }}
        path: |
          packages/*/coverage/
          packages/*/test-results/
        retention-days: 7

  # Build Tests
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
      fail-fast: false
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build all packages
      run: |
        # Build with better error handling
        pnpm build || {
          echo "Build failed, checking individual packages..."
          # Try building packages individually to identify issues
          for package in packages/*/; do
            if [ -f "$package/package.json" ]; then
              echo "Building $(basename $package)..."
              cd "$package" && pnpm build || echo "Failed to build $(basename $package)"
              cd - > /dev/null
            fi
          done
          exit 1
        }
      continue-on-error: false  # Build is critical
    
    - name: Verify build outputs
      run: |
        echo "Checking build outputs..."
        
        # Check that dist directories exist
        find packages -name "dist" -type d | while read dir; do
          if [ -d "$dir" ] && [ "$(ls -A $dir 2>/dev/null)" ]; then
            echo "✅ $dir has content"
          else
            echo "❌ $dir is empty or missing"
          fi
        done
        
        # Verify specific outputs if they exist
        [ -f "packages/cli/dist/cli.js" ] && echo "✅ CLI built" || echo "⚠️ CLI not found"
        [ -f "packages/babel-plugin/dist/index.js" ] && echo "✅ Babel plugin built" || echo "⚠️ Babel plugin not found"
        [ -f "packages/postcss-plugin/dist/index.js" ] && echo "✅ PostCSS plugin built" || echo "⚠️ PostCSS plugin not found"
        [ -f "packages/vite-plugin/dist/index.js" ] && echo "✅ Vite plugin built" || echo "⚠️ Vite plugin not found"
        [ -f "packages/next-plugin/dist/index.js" ] && echo "✅ Next plugin built" || echo "⚠️ Next plugin not found"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-artifacts-${{ matrix.node-version }}
        path: packages/*/dist/
        retention-days: 7

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
      fail-fast: false  # Don't cancel other jobs if one fails
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
      continue-on-error: true  # Don't fail if build has issues
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps chromium firefox webkit
    
    - name: Verify Playwright installation
      run: npx playwright --version
    
    - name: Start test application
      run: |
        # Start the test app in background with proper error handling
        pnpm dev > dev-server.log 2>&1 &
        echo $! > dev-server.pid
        
        # Wait for app to start with better error handling
        timeout 60 bash -c 'until curl -f http://localhost:3000 > /dev/null 2>&1; do sleep 2; done' || {
          echo "Dev server failed to start"
          cat dev-server.log
          exit 1
        }
        
        echo "Dev server started successfully"
    
    - name: Run E2E tests
      run: |
        # Run tests with better error handling and reporting
        npx playwright test \
          --reporter=html,json,junit \
          --output-dir=test-results \
          --max-failures=3 \
          --timeout=30000 \
          --retries=2
        
        # Check if tests actually ran
        if [ ! -f "test-results/results.json" ]; then
          echo "No test results found - tests may not have run"
          exit 1
        fi
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.node-version }}
        path: |
          playwright-report/
          test-results/
        retention-days: 30
    
    - name: Upload dev server logs
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: dev-server-logs-${{ matrix.node-version }}
        path: dev-server.log
        retention-days: 7
    
    - name: Cleanup
      if: always()
      run: |
        if [ -f dev-server.pid ]; then
          kill $(cat dev-server.pid) 2>/dev/null || true
        fi

  # Cross-browser Tests
  cross-browser:
    name: Cross-browser Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Start test application
      run: |
        pnpm dev &
        sleep 30
    
    - name: Run cross-browser tests
      run: npx playwright test --project=${{ matrix.browser }} --reporter=html

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Start test application
      run: |
        pnpm dev &
        sleep 30
    
    - name: Run performance tests
      run: npx playwright test tests/e2e/performance.spec.ts --reporter=html
    
    - name: Generate performance report
      run: |
        # Generate performance metrics report
        echo "Performance Test Results:" > performance-report.txt
        echo "=========================" >> performance-report.txt
        echo "Node Version: ${{ matrix.node-version }}" >> performance-report.txt
        echo "Timestamp: $(date)" >> performance-report.txt
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ matrix.node-version }}
        path: performance-report.txt

  # Bundle Size Analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Analyze bundle sizes
      run: |
        echo "Bundle Size Analysis:" > bundle-analysis.txt
        echo "====================" >> bundle-analysis.txt
        
        # Core package
        if [ -f "packages/core/dist/index.js" ]; then
          core_size=$(wc -c < packages/core/dist/index.js)
          core_size_kb=$((core_size / 1024))
          echo "Core Package: ${core_size_kb}KB" >> bundle-analysis.txt
        fi
        
        # CLI package
        if [ -f "packages/cli/dist/cli.js" ]; then
          cli_size=$(wc -c < packages/cli/dist/cli.js)
          cli_size_kb=$((cli_size / 1024))
          echo "CLI Package: ${cli_size_kb}KB" >> bundle-analysis.txt
        fi
        
        # Plugin packages
        for plugin in babel-plugin postcss-plugin vite-plugin next-plugin; do
          if [ -f "packages/${plugin}/dist/index.js" ]; then
            plugin_size=$(wc -c < packages/${plugin}/dist/index.js)
            plugin_size_kb=$((plugin_size / 1024))
            echo "${plugin}: ${plugin_size_kb}KB" >> bundle-analysis.txt
          fi
        done
        
        # Check size limits
        if [ $core_size_kb -gt 50 ]; then
          echo "WARNING: Core package exceeds 50KB limit" >> bundle-analysis.txt
          exit 1
        fi
        
        if [ $cli_size_kb -gt 100 ]; then
          echo "WARNING: CLI package exceeds 100KB limit" >> bundle-analysis.txt
          exit 1
        fi
    
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ matrix.node-version }}
        path: bundle-analysis.txt

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run security audit
      run: pnpm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Test Coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 10.13.1
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'pnpm'
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests with coverage
      run: pnpm test:coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.node-version }}
        path: coverage/
        retention-days: 30

  # Error Collection Summary
  error-summary:
    name: Error Collection Summary
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check for Error Collection Workflow
      run: |
        echo "# 🔍 Error Collection Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The comprehensive error collection workflow runs separately to collect all errors and warnings." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📋 Available Workflows:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "1. **Test Suite** (this workflow) - Runs unit tests, builds, linting, and E2E tests" >> $GITHUB_STEP_SUMMARY
        echo "2. **Error Collection** - Comprehensive error collection across all packages and Node.js versions" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Quick Links:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- [View Error Collection Workflow](https://github.com/${{ github.repository }}/actions/workflows/error-collection.yml)" >> $GITHUB_STEP_SUMMARY
        echo "- [View All Workflows](https://github.com/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 Current Test Status:" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This test suite focuses on functionality and basic quality checks." >> $GITHUB_STEP_SUMMARY
        echo "For comprehensive error analysis, check the Error Collection workflow." >> $GITHUB_STEP_SUMMARY

  # Final Status
  status:
    name: Test Status
    runs-on: ubuntu-latest
    needs: [unit-tests, build-tests, e2e-tests, cross-browser, performance-tests, bundle-analysis, security-audit, coverage, error-summary]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "Test Suite Summary"
        echo "================="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build Tests: ${{ needs.build-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Cross-browser Tests: ${{ needs.cross-browser.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Bundle Analysis: ${{ needs.bundle-analysis.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        
        # Count successful jobs
        success_count=0
        total_count=0
        
        for job in unit-tests build-tests e2e-tests cross-browser performance-tests bundle-analysis security-audit coverage; do
          total_count=$((total_count + 1))
          if [[ "${{ needs[job].result }}" == "success" ]]; then
            success_count=$((success_count + 1))
          fi
        done
        
        echo ""
        echo "Overall Status: $success_count/$total_count jobs passed"
        
        # Strict success criteria for enterprise-grade quality
        # All 8 jobs must pass for production readiness
        if [[ $success_count -eq $total_count ]]; then
          echo "✅ All tests passed ($success_count/$total_count)"
          echo "🎉 Production-ready build validated!"
          exit 0
        else
          echo "❌ Some tests failed ($success_count/$total_count)"
          echo "Failed jobs:"
          for job in unit-tests build-tests e2e-tests cross-browser performance-tests bundle-analysis security-audit coverage; do
            if [[ "${{ needs[job].result }}" != "success" ]]; then
              echo "  - $job: ${{ needs[job].result }}"
            fi
          done
          echo "🚫 Build not ready for production - please fix failing tests"
          exit 1
        fi
    
    - name: Generate Test Report
      run: |
        echo "# Test Results Summary" > test-summary.md
        echo "" >> test-summary.md
        echo "| Job | Status |" >> test-summary.md
        echo "|-----|--------|" >> test-summary.md
        echo "| Unit Tests | ${{ needs.unit-tests.result }} |" >> test-summary.md
        echo "| Build Tests | ${{ needs.build-tests.result }} |" >> test-summary.md
        echo "| E2E Tests | ${{ needs.e2e-tests.result }} |" >> test-summary.md
        echo "| Cross-browser Tests | ${{ needs.cross-browser.result }} |" >> test-summary.md
        echo "| Performance Tests | ${{ needs.performance-tests.result }} |" >> test-summary.md
        echo "| Bundle Analysis | ${{ needs.bundle-analysis.result }} |" >> test-summary.md
        echo "| Security Audit | ${{ needs.security-audit.result }} |" >> test-summary.md
        echo "| Coverage | ${{ needs.coverage.result }} |" >> test-summary.md
    
    - name: Upload Test Summary
      uses: actions/upload-artifact@v4
      with:
        name: test-summary
        path: test-summary.md
        retention-days: 30
