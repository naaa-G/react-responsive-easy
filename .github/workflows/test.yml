name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run unit tests
      run: pnpm test
    
    - name: Run type checking
      run: pnpm type-check
    
    - name: Run linting
      run: pnpm lint

  # Build Tests
  build-tests:
    name: Build Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build all packages
      run: pnpm build
    
    - name: Verify build outputs
      run: |
        # Check that all packages built successfully
        ls -la packages/*/dist/
        
        # Verify CLI executable
        test -f packages/cli/dist/cli.js
        
        # Verify plugin outputs
        test -f packages/babel-plugin/dist/index.js
        test -f packages/postcss-plugin/dist/index.js
        test -f packages/vite-plugin/dist/index.js
        test -f packages/next-plugin/dist/index.js

  # E2E Tests
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps
    
    - name: Start test application
      run: |
        # Start the test app in background
        pnpm dev &
        sleep 30  # Wait for app to start
        
    - name: Run E2E tests
      run: npx playwright test --reporter=html
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report-${{ matrix.node-version }}
        path: playwright-report/
        retention-days: 30

  # Cross-browser Tests
  cross-browser:
    name: Cross-browser Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        browser: [chromium, firefox, webkit]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Install Playwright browsers
      run: npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Start test application
      run: |
        pnpm dev &
        sleep 30
    
    - name: Run cross-browser tests
      run: npx playwright test --project=${{ matrix.browser }} --reporter=html

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Install Playwright
      run: npx playwright install --with-deps
    
    - name: Start test application
      run: |
        pnpm dev &
        sleep 30
    
    - name: Run performance tests
      run: npx playwright test tests/e2e/performance.spec.ts --reporter=html
    
    - name: Generate performance report
      run: |
        # Generate performance metrics report
        echo "Performance Test Results:" > performance-report.txt
        echo "=========================" >> performance-report.txt
        echo "Node Version: ${{ matrix.node-version }}" >> performance-report.txt
        echo "Timestamp: $(date)" >> performance-report.txt
    
    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report-${{ matrix.node-version }}
        path: performance-report.txt

  # Bundle Size Analysis
  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Build packages
      run: pnpm build
    
    - name: Analyze bundle sizes
      run: |
        echo "Bundle Size Analysis:" > bundle-analysis.txt
        echo "====================" >> bundle-analysis.txt
        
        # Core package
        if [ -f "packages/core/dist/index.js" ]; then
          core_size=$(wc -c < packages/core/dist/index.js)
          core_size_kb=$((core_size / 1024))
          echo "Core Package: ${core_size_kb}KB" >> bundle-analysis.txt
        fi
        
        # CLI package
        if [ -f "packages/cli/dist/cli.js" ]; then
          cli_size=$(wc -c < packages/cli/dist/cli.js)
          cli_size_kb=$((cli_size / 1024))
          echo "CLI Package: ${cli_size_kb}KB" >> bundle-analysis.txt
        fi
        
        # Plugin packages
        for plugin in babel-plugin postcss-plugin vite-plugin next-plugin; do
          if [ -f "packages/${plugin}/dist/index.js" ]; then
            plugin_size=$(wc -c < packages/${plugin}/dist/index.js)
            plugin_size_kb=$((plugin_size / 1024))
            echo "${plugin}: ${plugin_size_kb}KB" >> bundle-analysis.txt
          fi
        done
        
        # Check size limits
        if [ $core_size_kb -gt 50 ]; then
          echo "WARNING: Core package exceeds 50KB limit" >> bundle-analysis.txt
          exit 1
        fi
        
        if [ $cli_size_kb -gt 100 ]; then
          echo "WARNING: CLI package exceeds 100KB limit" >> bundle-analysis.txt
          exit 1
        fi
    
    - name: Upload bundle analysis
      uses: actions/upload-artifact@v4
      with:
        name: bundle-analysis-${{ matrix.node-version }}
        path: bundle-analysis.txt

  # Security Audit
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run security audit
      run: pnpm audit --audit-level moderate
    
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  # Test Coverage
  coverage:
    name: Test Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
    
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
    
    - name: Run tests with coverage
      run: pnpm test:coverage
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports-${{ matrix.node-version }}
        path: coverage/
        retention-days: 30

  # Final Status
  status:
    name: Test Status
    runs-on: ubuntu-latest
    needs: [unit-tests, build-tests, e2e-tests, cross-browser, performance-tests, bundle-analysis, security-audit, coverage]
    if: always()
    
    steps:
    - name: Test Summary
      run: |
        echo "Test Suite Summary"
        echo "================="
        echo "Unit Tests: ${{ needs.unit-tests.result }}"
        echo "Build Tests: ${{ needs.build-tests.result }}"
        echo "E2E Tests: ${{ needs.e2e-tests.result }}"
        echo "Cross-browser Tests: ${{ needs.cross-browser.result }}"
        echo "Performance Tests: ${{ needs.performance-tests.result }}"
        echo "Bundle Analysis: ${{ needs.bundle-analysis.result }}"
        echo "Security Audit: ${{ needs.security-audit.result }}"
        echo "Coverage: ${{ needs.coverage.result }}"
        
        # Check if all critical tests passed
        if [[ "${{ needs.unit-tests.result }}" == "success" && 
              "${{ needs.build-tests.result }}" == "success" && 
              "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "✅ Critical tests passed"
          exit 0
        else
          echo "❌ Some critical tests failed"
          exit 1
        fi
