/**
 * Tests for @react-responsive-easy/postcss-plugin
 */

import postcss from 'postcss';
import plugin from '../index';
import { describe, it, expect } from 'vitest';

// Helper function to process CSS with our plugin
async function processCss(css: string, options = {}) {
  const result = await postcss([plugin(options)]).process(css, { from: 'test.css' });
  return result.css;
}

describe('@react-responsive-easy/postcss-plugin', () => {
  describe('rre() function processing', () => {
    it('should transform rre() function calls', async () => {
      const input = `
        .button {
          font-size: rre(18);
          padding: rre(16);
        }
      `;
      
      const output = await processCss(input, { generateCustomProperties: true });
      
      expect(output).toContain('var(--rre-font-size)');
      expect(output).toContain('var(--rre-padding)');
      expect(output).toContain(':root');
    });
    
    it('should handle rre() with token parameter', async () => {
      const input = `
        .text {
          font-size: rre(24, fontSize);
        }
      `;
      
      const output = await processCss(input, { generateCustomProperties: true });
      
      expect(output).toContain('var(--rre-font-size)');
      expect(output).toContain(':root');
    });
    
    it('should generate responsive media queries', async () => {
      const input = `
        .container {
          width: rre(1200);
        }
      `;
      
      const output = await processCss(input, { generateCustomProperties: true });
      
      expect(output).toContain('@media');
      expect(output).toContain('max-width');
      expect(output).toContain('390px'); // mobile breakpoint
      expect(output).toContain('768px'); // tablet breakpoint
    });
    
    it('should not transform when generateCustomProperties is false', async () => {
      const input = `
        .button {
          font-size: rre(18);
        }
      `;
      
      const output = await processCss(input, { generateCustomProperties: false });
      
      expect(output).toContain('18px');
      expect(output).not.toContain('var(');
      expect(output).not.toContain(':root');
    });
  });
  
  describe('CSS custom properties generation', () => {
    it('should generate :root rule with custom properties', async () => {
      const input = `
        .element {
          margin: rre(20);
          padding: rre(16);
        }
      `;
      
      const output = await processCss(input, { 
        generateCustomProperties: true,
        customPropertyPrefix: '--my-prefix'
      });
      
      expect(output).toContain(':root');
      expect(output).toContain('--my-prefix-margin: 20px');
      expect(output).toContain('--my-prefix-padding: 16px');
    });
    
    it('should generate responsive variants in media queries', async () => {
      const input = `
        .text {
          font-size: rre(24);
        }
      `;
      
      const output = await processCss(input);
      
      // Should contain media queries for different breakpoints
      expect(output).toContain('@media (max-width: 390px)'); // mobile
      expect(output).toContain('@media (max-width: 768px)'); // tablet
      expect(output).toContain('@media (max-width: 1366px)'); // laptop
    });
  });
  
  describe('@custom-media rules generation', () => {
    it('should generate @custom-media rules', async () => {
      const input = `
        .component {
          color: blue;
        }
      `;
      
      const output = await processCss(input, { generateCustomMedia: true });
      
      expect(output).toContain('@custom-media --mobile (max-width: 390px)');
      expect(output).toContain('@custom-media --tablet (max-width: 768px)');
      expect(output).toContain('@custom-media --laptop (max-width: 1366px)');
      expect(output).toContain('@custom-media --desktop (max-width: 1920px)');
    });
    
    it('should not generate @custom-media when disabled', async () => {
      const input = `
        .component {
          color: blue;
        }
      `;
      
      const output = await processCss(input, { generateCustomMedia: false });
      
      expect(output).not.toContain('@custom-media');
    });
  });
  
  describe('development mode', () => {
    it('should add comments in development mode', async () => {
      const input = `
        .button {
          font-size: rre(18);
        }
      `;
      
      const output = await processCss(input, { 
        development: true,
        generateCustomProperties: true,
        generateCustomMedia: true
      });
      
      expect(output).toContain('Generated by @react-responsive-easy/postcss-plugin');
      expect(output).toContain('Custom media queries generated');
    });
    
    it('should not add comments in production mode', async () => {
      const input = `
        .button {
          font-size: rre(18);
        }
      `;
      
      const output = await processCss(input, { 
        development: false,
        generateCustomProperties: true,
        generateCustomMedia: true
      });
      
      expect(output).not.toContain('Generated by @react-responsive-easy/postcss-plugin');
      expect(output).not.toContain('Custom media queries generated');
    });
  });
  
  describe('complex CSS handling', () => {
    it('should handle multiple rre() calls in one declaration', async () => {
      const input = `
        .complex {
          margin: rre(10) rre(20) rre(10) rre(20);
        }
      `;
      
      const output = await processCss(input, { generateCustomProperties: true });
      
      expect(output).toContain('var(--rre-margin)');
      expect(output).toContain(':root');
    });
    
    it('should handle rre() in calc() functions', async () => {
      const input = `
        .calculated {
          width: calc(100% - rre(40));
        }
      `;
      
      const output = await processCss(input, { generateCustomProperties: true });
      
      expect(output).toContain('calc(100% - var(--rre-width))');
    });
    
    it('should preserve non-rre() values', async () => {
      const input = `
        .mixed {
          font-size: rre(18);
          color: red;
          background: #fff;
          border: 1px solid black;
        }
      `;
      
      const output = await processCss(input);
      
      expect(output).toContain('color: red');
      expect(output).toContain('background: #fff');
      expect(output).toContain('border: 1px solid black');
    });
  });
  
  describe('error handling', () => {
    it('should handle malformed rre() calls gracefully', async () => {
      const input = `
        .malformed {
          font-size: rre();
          padding: rre(invalid);
        }
      `;
      
      const output = await processCss(input);
      
      // Should not throw and should preserve original values
      expect(output).toContain('rre()');
      expect(output).toContain('rre(invalid)');
    });
    
    it('should handle empty CSS', async () => {
      const input = '';
      
      const output = await processCss(input);
      
      expect(output).toBe('');
    });
  });
  
  describe('configuration', () => {
    it('should use default options when none provided', async () => {
      const input = `
        .default {
          font-size: rre(16);
        }
      `;
      
      const output = await processCss(input);
      
      expect(output).toContain('var(--rre-font-size)');
      expect(output).toContain('@custom-media');
    });
    
    it('should respect custom prefix', async () => {
      const input = `
        .custom {
          font-size: rre(16);
        }
      `;
      
      const output = await processCss(input, { 
        customPropertyPrefix: '--custom'
      });
      
      expect(output).toContain('var(--custom-font-size)');
      expect(output).toContain('--custom-font-size: 16px');
    });
  });
});
